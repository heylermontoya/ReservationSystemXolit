// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RESERVATION_SYSTEM.Infrastructure.Context;

#nullable disable

namespace RESERVATION_SYSTEM.Infrastructure.Migrations
{
    [DbContext(typeof(PersistenceContext))]
    [Migration("20250103042130_SeAgreganDatosSemillaParaEntidadesCustomerYSpacesOServices")]
    partial class SeAgreganDatosSemillaParaEntidadesCustomerYSpacesOServices
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.customer.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateRegistration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customer", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53642f6c-85a5-4c73-b812-cd1a7c3715c1"),
                            DateRegistration = new DateTime(2025, 1, 3, 4, 21, 30, 12, DateTimeKind.Utc).AddTicks(8487),
                            Email = "heylers03@gmail.com",
                            Name = "Heyler Montoya",
                            Phone = "123456789"
                        },
                        new
                        {
                            Id = new Guid("4c3aef5e-d05e-456c-8008-98db1dca32de"),
                            DateRegistration = new DateTime(2025, 1, 3, 4, 21, 30, 12, DateTimeKind.Utc).AddTicks(8496),
                            Email = "jamontoya@example.com",
                            Name = "Jorge Montoya",
                            Phone = "987654321"
                        },
                        new
                        {
                            Id = new Guid("e84a0d01-bf19-47cd-8a9e-7627d27c6617"),
                            DateRegistration = new DateTime(2025, 1, 3, 4, 21, 30, 12, DateTimeKind.Utc).AddTicks(8501),
                            Email = "kleyva@example.com",
                            Name = "Kevin Leyva",
                            Phone = "987654321"
                        });
                });

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.historyReservation.HistoryReservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateChange")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescriptionChange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReservationID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ReservationID");

                    b.ToTable("HistoryReservation", "dbo");
                });

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.reservation.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberPeople")
                        .HasColumnType("int");

                    b.Property<Guid?>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Reservation", "dbo");
                });

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.service.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaximumReservationTime")
                        .HasColumnType("int");

                    b.Property<int>("MinimumReservationTime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Service", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17daf7a-ebb8-4063-3d67-08dd29993bc7"),
                            Capacity = 50,
                            Description = "Espacio amplio equipado con proyector, sistema de audio y micrófonos, ideal para conferencias y reuniones grandes.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Sala de Conferencias Principal",
                            Price = 100f
                        },
                        new
                        {
                            Id = new Guid("07601682-d4fa-4811-3d68-08dd29993bc7"),
                            Capacity = 10,
                            Description = "Sala equipada con pantalla y videoconferencia para reuniones de equipo.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Sala de Reuniones A",
                            Price = 50f
                        },
                        new
                        {
                            Id = new Guid("a9cbd100-c74d-40d7-3d69-08dd29993bc7"),
                            Capacity = 8,
                            Description = "Sala moderna con una mesa redonda y pizarra para sesiones de brainstorming.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Sala de Reuniones B",
                            Price = 40f
                        },
                        new
                        {
                            Id = new Guid("c1617b5a-bafb-48f6-3d6a-08dd29993bc7"),
                            Capacity = 200,
                            Description = "Espacio para eventos grandes con capacidad para presentaciones o capacitaciones.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Auditorio",
                            Price = 200f
                        },
                        new
                        {
                            Id = new Guid("7a1649d9-5fa2-4c5a-3d6b-08dd29993bc7"),
                            Capacity = 30,
                            Description = "Área compartida con escritorios y conexión a internet de alta velocidad.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Espacio de Coworking",
                            Price = 20f
                        },
                        new
                        {
                            Id = new Guid("1ce79359-9dec-4606-3d6c-08dd29993bc7"),
                            Capacity = 15,
                            Description = "Espacio creativo con herramientas tecnológicas como impresoras 3D y estaciones de trabajo.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Laboratorio de Innovación",
                            Price = 150f
                        },
                        new
                        {
                            Id = new Guid("99d18fd9-5afd-490a-3d6d-08dd29993bc7"),
                            Capacity = 4,
                            Description = "Oficina cerrada y equipada con escritorios, sillas ergonómicas y conexión a internet.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Oficina Privada 1",
                            Price = 40f
                        },
                        new
                        {
                            Id = new Guid("a8623c60-3d75-4867-3d6e-08dd29993bc7"),
                            Capacity = 5,
                            Description = "Oficina privada con vista al exterior y acceso a equipo de oficina básico.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Oficina Privada 2",
                            Price = 45f
                        },
                        new
                        {
                            Id = new Guid("d5c6082a-f9d3-453d-3d6f-08dd29993bc7"),
                            Capacity = 80,
                            Description = "Espacio al aire libre ideal para eventos sociales o reuniones informales.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Terraza para Eventos",
                            Price = 120f
                        },
                        new
                        {
                            Id = new Guid("3bdeb5a9-993b-4ce7-3d70-08dd29993bc7"),
                            Capacity = 40,
                            Description = "Espacio configurable para actividades como yoga, talleres o eventos corporativos.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Salón Multiusos",
                            Price = 70f
                        },
                        new
                        {
                            Id = new Guid("8e37fd17-4f1c-41d3-3d71-08dd29993bc7"),
                            Capacity = 20,
                            Description = "Sala equipada con mesas, sillas y proyector, ideal para talleres y cursos.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Área de Capacitación",
                            Price = 60f
                        },
                        new
                        {
                            Id = new Guid("4bc33543-2132-43f0-3d72-08dd29993bc7"),
                            Capacity = 25,
                            Description = "Sala oscura con pantalla gigante y sistema de sonido envolvente, ideal para presentaciones multimedia.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Sala de Proyecciones",
                            Price = 90f
                        },
                        new
                        {
                            Id = new Guid("2f784265-cdcd-43a1-3d73-08dd29993bc7"),
                            Capacity = 10,
                            Description = "Espacio avanzado con equipos de realidad virtual y simulación.",
                            MaximumReservationTime = 2,
                            MinimumReservationTime = 1,
                            Name = "Centro de Innovación Tecnológica",
                            Price = 200f
                        });
                });

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.historyReservation.HistoryReservation", b =>
                {
                    b.HasOne("RESERVATION_SYSTEM.Domain.Entities.reservation.Reservation", "Reservation")
                        .WithMany("HistoryReservation")
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.reservation.Reservation", b =>
                {
                    b.HasOne("RESERVATION_SYSTEM.Domain.Entities.customer.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RESERVATION_SYSTEM.Domain.Entities.service.Service", "Service")
                        .WithMany("Reservations")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.customer.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.reservation.Reservation", b =>
                {
                    b.Navigation("HistoryReservation");
                });

            modelBuilder.Entity("RESERVATION_SYSTEM.Domain.Entities.service.Service", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
